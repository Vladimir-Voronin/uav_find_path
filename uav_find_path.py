# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UAVFindPath
                                 A QGIS plugin
 -
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-14
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Vladimir Voronin
        email                : vladimirvoron7@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import inspect
import os
import sys
import threading

dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(dir_path)


from algorithms.GdalFPExtension.research.ResearchTest import Test
from algorithms.GdalFPExtension.qgis.visualization.Visualizer import Visualizer
from algorithms.GdalFPExtension.research.ResearchPoint import PointsCreater

import qgis
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMainWindow, QDialog
from qgis.core import *
from qgis.gui import *
import os.path
import copy
import importlib

from ModuleInstruments.Converter import Converter

import PyQt5
# Initialize Qt resources from file resources.py
from ModuleInstruments.DebugLog import DebugLog
from ModuleInstruments.FindPathData import FindPathData, check_if_FindPathData_is_ok
from .resources import *
# Import the code for the dialog
from .uav_find_path_dialog import UAVFindPathDialog

import time

from algorithms import RandomizedRoadmapMethod, RandomizedRoadmapGridMethod, RRTDirectMethod, DijkstraMethodGrid, \
    AStarMethodGrid, DStarMethod, APFMethod, BugMethod, FormerMethod


class UAVFindPath:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An abstract instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS abstract
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'UAVFindPath_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&UAVFindPath')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        # parametrs
        self.project = None
        self.obstacle_layer = None
        self.start_point = None
        self.target_point = None
        self.path_to_save_layers = None
        self.method_address = None
        self.method = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('UAVFindPath', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/uav_find_path/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Find path'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&UAVFindPath'),
                action)
            self.iface.removeToolBarIcon(action)

    def choose_directory(self):
        self.path_to_save_layers = QFileDialog.getExistingDirectory(self.dlg, caption='Select folder')
        self.dlg.textEdit_save_folder.setText(self.path_to_save_layers)

    def choose_module_file(self):
        file_filter = "Module file (*.py);"
        self.method_address = QFileDialog.getOpenFileName(self.dlg, caption='Select module', filter=file_filter)[0]
        self.dlg.textEdit_method_address.setText(self.method_address)

    def set_obstacle_layer(self):
        layers = self.project.layerTreeRoot().children()
        selected_layer_index = self.dlg.comboBox_select_obstacles.currentIndex() - 1
        if selected_layer_index >= 0:
            self.obstacle_layer = layers[selected_layer_index].layer()

    def point_button_clicked(self, number_of_point):
        if not self.layer_verofication():
            return

        dial = QDialog(None)
        dial.show()
        dial.setModal(True)
        if number_of_point == 1:
            text_x = self.dlg.textEdit_start_point_x
            text_y = self.dlg.textEdit_start_point_y
        elif number_of_point == 2:
            text_x = self.dlg.textEdit_target_point_x
            text_y = self.dlg.textEdit_target_point_y
        canvas = QgsMapCanvas()
        canvas.show()
        layer = self.obstacle_layer
        canvas.setCanvasColor(Qt.white)
        canvas.enableAntiAliasing(True)
        canvas.setLayers([layer])
        canvas.setExtent(layer.extent())

        emit_point = QgsMapToolEmitPoint(canvas)
        canvas.setMapTool(emit_point)

        def display(pt):
            text_x.setText(str(pt.x()))
            text_y.setText(str(pt.y()))
            canvas.destroy()
            dial.done(1)

        emit_point.canvasClicked.connect(display)

        result = dial.exec()
        if result:
            pass

    def update_combo_box_layers(self):
        layers = self.project.layerTreeRoot().children()
        self.dlg.comboBox_select_obstacles.clear()
        self.dlg.comboBox_select_obstacles.addItem("")
        self.dlg.comboBox_select_obstacles.addItems([layer.name() for layer in layers])

    def error_call(self, message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(message)
        msg.setWindowTitle("Error")
        msg.exec_()

    def layer_verofication(self):
        if self.obstacle_layer:
            return True
        self.error_call("Choose obstacle layer please")

    def verification(self):
        # Handle layers
        self.layer_verofication()

        # Handle points of square
        s_point = None
        t_point = None
        try:
            s_point = QgsPointXY(float(self.dlg.textEdit_start_point_x.toPlainText()),
                                 float(self.dlg.textEdit_start_point_y.toPlainText()))
            t_point = QgsPointXY(float(self.dlg.textEdit_target_point_x.toPlainText()),
                                 float(self.dlg.textEdit_target_point_y.toPlainText()))
        except ValueError:
            self.error_call("Data entry error")
            return False

        # self.error_call(f"{s_point.x()}, {t_point.x()}")
        if s_point.x() > t_point.x() or s_point.y() > t_point.y():
            self.error_call("""Wrong points. Please choose this point like that:
            
                                                        p2
                                                        
                                
                                
                                p1"""
                            )
            return False

        # Handle save folder
        if self.dlg.textEdit_save_folder.toPlainText() is None or self.dlg.textEdit_save_folder.toPlainText() == "":
            self.error_call("Enter save folder, please")
            return False

        # Handle method choosing
        if self.dlg.textEdit_method_address.toPlainText() is None or self.dlg.textEdit_method_address.toPlainText() == "":
            self.error_call("Enter your method, please")
            return False

        return True

    def set_main_variables(self):
        # Reading data from interface
        self.start_point = QgsGeometry.fromPointXY(
            QgsPointXY(float(self.dlg.textEdit_start_point_x.toPlainText()),
                       float(self.dlg.textEdit_start_point_y.toPlainText())))
        self.target_point = QgsGeometry.fromPointXY(
            QgsPointXY(float(self.dlg.textEdit_target_point_x.toPlainText()),
                       float(self.dlg.textEdit_target_point_y.toPlainText())))

        self.path_to_save_layers = self.dlg.textEdit_save_folder.toPlainText()

        # Import module and get method
        spec = importlib.util.spec_from_file_location("module_to_use",
                                                      self.method_address)
        MethodModule = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(MethodModule)

        correct = False
        for name, obj in inspect.getmembers(MethodModule):
            if inspect.isclass(obj):
                if str(obj).find("module_to_use") != -1 and str(obj).find("Method") != -1:
                    self.method = obj
                    correct = True
                    break
        if not correct:
            self.error_call("This module file is not correct.")
            return False
        return True

    def get_geometry(self):
        # create geometry obstacle
        obstacles = QgsVectorLayer(self.obstacle_layer.source(), self.obstacle_layer.name(),
                                   self.obstacle_layer.providerType())
        source_list_of_geometry_obstacles = Converter.get_list_of_poligons_in_3395(obstacles, self.project)

        list_of_geom = []
        for polygon in source_list_of_geometry_obstacles:
            list_of_geom.append(polygon)

        number_of_polyg = len(list_of_geom)
        print(number_of_polyg)

        geometry = QgsGeometry.fromPolygonXY([[QgsPointXY(1, 1), QgsPointXY(2, 2), QgsPointXY(2, 1)]])
        for polygon in list_of_geom:
            if polygon is not None:
                geometry.addPartGeometry(polygon)
        geometry.deletePart(0)
        return geometry

    def create_points(self, geometry, layer_with_obstacles):
        # general variables
        the_max_possible_distance = 2500
        numbers_of_points_for_each_iteration = 20
        start_length = 100
        step = 100
        access_min = 10
        access_max = 50

        # get max distance for this squeare
        s_point = self.start_point.asPoint()
        t_point = self.target_point.asPoint()

        # need to change "project" to "QgsProject.instance" when import to module
        transformcontext = self.project.transformContext()
        general_projection = QgsCoordinateReferenceSystem("EPSG:3395")
        xform = QgsCoordinateTransform(layer_with_obstacles.crs(), general_projection, transformcontext)

        # type: QgsPointXY
        s_point = xform.transform(s_point)
        t_point = xform.transform(t_point)

        max_distance = PointsCreater.get_max_research_distance(s_point.x(), s_point.y(), t_point.x(), t_point.y())
        if max_distance < start_length:
            self.error_call("Too small square. Please choose another area")

        max_distance = the_max_possible_distance if max_distance >= the_max_possible_distance else max_distance
        self.error_call(f"{max_distance}")

        # add point pares
        pointspares_list = []

        self.dlg.progressBar.setMinimum(0)
        self.dlg.progressBar.setMaximum(int(max_distance / step))
        for i in range(int(max_distance / step)):
            self.dlg.label_progress.setText(f"Put points on distance {(i + 1) * step}")
            new_list = PointsCreater.create_points(numbers_of_points_for_each_iteration, start_length, access_min,
                                                   access_max, geometry, s_point.x(), s_point.y(), t_point.x(),
                                                   t_point.y())
            start_length += step
            self.dlg.progressBar.setValue(i + 1)
            for i in new_list:
                pointspares_list.append(i)

        return pointspares_list

    def press_run(self):
        is_ok = self.verification()
        if not is_ok:
            return

        is_ok = self.set_main_variables()
        if not is_ok:
            return
        geometry = self.get_geometry()

        layer_with_obstacles = QgsVectorLayer(self.obstacle_layer.source(), self.obstacle_layer.name(),
                                              self.obstacle_layer.providerType())
        points_pares = self.create_points(geometry, layer_with_obstacles)

        Test.run_test_from_plugin(points_pares, self.method, self.project, layer_with_obstacles,
                                  self.path_to_save_layers)
        return

        source_list_of_geometry_obstacles = Converter.get_list_of_poligons_in_3395(layer_with_obstacles, self.project)

        find_path_data = FindPathData(self.project, self.start_point, self.target_point,
                                      layer_with_obstacles,
                                      self.path_to_save_layers, self.dlg.checkBox_create_debug_layers.isChecked(),
                                      source_list_of_geometry_obstacles)

        if check_if_FindPathData_is_ok(find_path_data):
            my_algorithm = self.algorithm_dict[self.dlg.comboBox_select_search_method.currentText()]

            current_algorithm = my_algorithm(find_path_data, debug_log)
            current_algorithm.run()
            current_algorithm.visualize()
            self.dlg.textEdit_debug_info.setText(current_algorithm.debuglog.get_info())
            # clean resources
            self.update_combo_box_layers()
            self.dlg.comboBox_select_obstacles.setCurrentIndex(0)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = UAVFindPathDialog()
            # button logic
            self.dlg.pushButton_start_point.clicked.connect(lambda: self.point_button_clicked(1))
            self.dlg.pushButton_target_point.clicked.connect(lambda: self.point_button_clicked(2))
            self.dlg.comboBox_select_obstacles.currentIndexChanged.connect(lambda: self.set_obstacle_layer())
            self.dlg.pushButton_save_folder.clicked.connect(lambda: self.choose_directory())
            self.dlg.pushButton_method_address.clicked.connect(lambda: self.choose_module_file())
            self.dlg.pushButton_run.clicked.connect(lambda: self.press_run())

        self.project = QgsProject.instance()

        # add layers to "select layer"
        self.update_combo_box_layers()

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            pass
